# stdlib
import re
from typing import Any, Dict, List, Tuple

# 3rd party
import attrs
from domdf_python_tools.compat import importlib_metadata

# this package
from attr_utils.docstrings import add_attrs_doc


def my_converter(arg: List[Dict[str, Any]]):
	return arg


def untyped_converter(arg):
	return arg


def test_add_attrs_doc():

	@attrs.define(order=True)
	class SomeClass:
		a_string: str = attrs.field(converter=str)
		custom_converter: Any = attrs.field(converter=my_converter)
		untyped: Tuple[str, int, float] = attrs.field(converter=untyped_converter)

	if importlib_metadata.version("attrs") == "19.3.0":
		doc = "\n        Automatically created by attrs.\n        "

		assert SomeClass.__eq__.__doc__ is None
		assert SomeClass.__ge__.__doc__ == doc
		assert SomeClass.__gt__.__doc__ == doc
		assert SomeClass.__lt__.__doc__ == doc
		assert SomeClass.__le__.__doc__ == doc
		assert re.sub("\\s+", ' ', str(SomeClass.__ne__.__doc__)).strip() in {
				"Return ``self != other``.",
				"Check equality and either forward a NotImplemented or return the result negated."
				}
		assert SomeClass.__repr__.__doc__ == doc
	else:

		doc = "Method generated by attrs for class test_add_attrs_doc.<locals>.SomeClass."

		assert SomeClass.__eq__.__doc__ == doc
		assert SomeClass.__ge__.__doc__ == doc
		assert SomeClass.__gt__.__doc__ == doc
		assert SomeClass.__lt__.__doc__ == doc
		assert SomeClass.__le__.__doc__ == doc
		assert SomeClass.__repr__.__doc__ == doc
		if attrs.__version_info__ >= (25, 3):  # type: ignore[operator]
			assert re.sub("\\s+", ' ', str(SomeClass.__ne__.__doc__)).strip() in {
					"Return ``self != other``.",
					"Check equality and either forward a NotImplemented or return the result negated."
					}
		else:
			assert SomeClass.__ne__.__doc__ == doc

	add_attrs_doc(SomeClass)

	assert SomeClass.__eq__.__doc__ == "Return ``self == other``."
	assert SomeClass.__ge__.__doc__ == "Return ``self >= other``."
	assert SomeClass.__gt__.__doc__ == "Return ``self > other``."
	assert SomeClass.__lt__.__doc__ == "Return ``self < other``."
	assert SomeClass.__le__.__doc__ == "Return ``self <= other``."
	assert SomeClass.__ne__.__doc__ == "Return ``self != other``."
	assert SomeClass.__repr__.__doc__ == f"Return a string representation of the :class:`~.SomeClass`."
